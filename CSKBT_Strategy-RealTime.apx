<?xml version="1.0" encoding="ISO-8859-1"?>
<AmiBroker-Analysis CompactMode="0">
<General>
<FormatVersion>1</FormatVersion>
<Symbol>A</Symbol>
<FormulaPath>C:\\Users\\finith\\Documents\\GitHub\\candlestickpatternbacktest\\CSKBT_Strategy.afl</FormulaPath>
<FormulaContent>// 123 continuation short Strategy\r\n// added //** for values that should be in a column to optimize\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//ADDING FUNCTIONS\r\n\r\n/*\r\nfunction myFunction( parameter1, parameter2 ) {\r\n  // function body\r\n}\r\n*/\r\n\r\n\r\nEnableTextOutput(0);  \r\nSetBarsRequired( sbrAll, sbrAll );\r\n\r\ntradelogPath = "C:\\\\Program Files\\\\AmiBroker\\\\Reports";\r\nSetOption("NoDefaultColumns", False);\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//SETTING FILTERING\r\n\r\nfilteringParam6 = Param( "filtering6", 1, 0, 20, 1 );\r\naddColumnsToExplorationParam6 = Param( "addColumnsToExploration6", 0, 0, 5, 1 );\r\n\r\nstopMultipleParam6 = Param( "stopMultiplePercent - factor of positionSizeFactor6", 0.3, 0.01, 10, 0.01 );\r\nprofitRmultipleParam6 = Param( "profitRmultple - factor of positionSizeFactor6", 0.9, 0.01, 10, 0.01 );\r\ntradegoodforbarsParam6 = Param( "trade good for X number of bars6", 85, 0, 1000, 1 );\r\nscanbackParam6 = Param( "scanback6", 3, 0, 100000, 1 );\r\n\r\nRSizeDollarsParam6 = Param( "RSizeDollars6", 100, 1, 10000, 1 );\r\n\r\naddbacktestinglogicParam6 = Param( "add backtesting logic6", 1, 0, 20, 1 );\r\naddtradeentrylogicParam6 = Param( "add trade entry logic6", 1, 0, 20, 1 );\r\n\r\nD14minvolumeParam6 = Param( "14 day minimum volume6", 1000000, 0, 1000000000000, 1000 );\r\nD14ATRcutoffParam6 = Param( "14 day ATR Cutoff6", 0.5, 0, 50, 0.1 );\r\noptimizedParametersParam6 = Param( "optimized Parameters6", 1, 0, 1, 1 );\r\n\r\n///////////////////////////////////////////\r\n\r\nfiltering = filteringParam6;\r\naddColumnsToExploration = addColumnsToExplorationParam6;\r\nstopMultiple = stopMultipleParam6;\r\nprofitRmultiple = profitRmultipleParam6;\r\naddbacktestinglogic = addbacktestinglogicParam6;\r\naddtradeentrylogic = addtradeentrylogicParam6;\r\ntradegoodforbars = tradegoodforbarsParam6;\r\nscanback = scanbackParam6;\r\noptimizedParameters = optimizedParametersParam6;\r\nRSizeDollars = RSizeDollarsParam6;\r\nD14ATRcutoff = D14ATRcutoffParam6;\r\nD14minvolume = D14minvolumeParam6;\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//SETTING OPTIMIZED SYSTEM PARAMETERS\r\n\r\nif (optimizedParameters == 1)\r\n{\r\n// set optimized parameters\t\r\n\tmacd212MIN = 0.60;\r\n\tmacd212MAX = 100;\r\n\trsi60dailyMIN = 0;\r\n\trsi60dailyMAX = 53;\r\n\tABStodaysGapMIN = 0.15;\r\n\tABStodaysGapMAX = 87;\r\n\tD200SMAMIN = 55;\r\n\tD200SMAMAX = 3373;\r\n\tBBandTopopen152MIN = 95;\r\n\tBBandTopopen152MAX = 3478;\r\n\r\n\tD14VolumeMIN = 1600000;\r\n\tD14VolumeMAX = 1000000000000;\r\n\tD14ATRMIN = 0.5;\r\n\tD14ATRMAX = 100;\r\n\t\r\n}\r\nif (optimizedParameters == 0)\r\n{\r\n// set optimized parameters\r\n\tmacd212MIN = -100000000000;\r\n\tmacd212MAX = 1000000000000;\r\n\trsi60dailyMIN = -100000000000;\r\n\trsi60dailyMAX = 1000000000000;\r\n\tABStodaysGapMIN = -100000000000;\r\n\tABStodaysGapMAX = 1000000000000;\r\n\tD200SMAMIN = -100000000000;\r\n\tD200SMAMAX = 1000000000000;\r\n\tBBandTopopen152MIN = -100000000000;\r\n\tBBandTopopen152MAX = 1000000000000;\r\n\r\n\tD14VolumeMIN = -100000000000;\r\n\tD14VolumeMAX = 1000000000000;\r\n\tD14ATRMIN = -100000000000;\r\n\tD14ATRMAX = 1000000000000;\r\n\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//VARIABLES THAT AREN'T SYSTEM SPECIFIC\r\n\r\nminTimeToEnter = 093000;\r\nmaxTimeToEnter = 151500;\r\nStartTimePremarket = 000000; \r\nEndTimePremarket = 092900;\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//SETTING DATE TIME VARIABLES\r\n\r\ntm = TimeNum();\r\ndt = DateTime();\r\nnw = Now();\r\nhr = Hr = Hour();\r\nmn = Mn = Minute();\r\ndy = Day();\r\nmth = mnth = Month();\r\nyr = Year();\r\ndn = DateNum();\r\nbi = BarIndex();\r\nopen_hour = 9;\r\nopen_minute = 30;\r\n\r\nMinutesSinceOpen = (hr * 60 + mn) - (open_hour * 60 + open_minute);\r\nPreMarket = MinutesSinceOpen &lt; 0;\r\nAfterHours = MinutesSinceOpen &gt;= 390;\r\nnewday = MinutesSinceOpen == 0 || (MinutesSinceOpen &gt; 0 &amp;&amp; Ref(MinutesSinceOpen, -1) &lt; 0) || (MinutesSinceOpen &gt; 0 &amp;&amp; dn != dn); // NEW DAY IS NEW TRADING DAY LIKE 9:25AM TO 9:30AM\r\nnewdaybar = dn != Ref(dn, -1); //NEW DAY BAR IS A NEW ACTUAL DAY LIKE 11/1 TO 11/2\r\nlastrthbar = Ref(MinutesSinceOpen == 390, 1) || (MinutesSinceOpen &lt; 390 &amp;&amp; Ref(MinutesSinceOpen, 1) &gt; 390) || (MinutesSinceOpen &lt; 390 &amp;&amp; dn != Ref( dn, 1 ));\r\nBars_so_far_today = BarsSince(newday);  //**\r\n\r\n/////\r\n//\tMUST ADD IIf( FirstBarPremarket == EndBarPremarket, 0, XXXXXX);\r\n//\tTO ALL PREMARKET CALCULATION TO ALL FOR ZERO PREMARKET BARS\r\n////\r\nFirstBarPremarket = ValueWhen(newdaybar == 1, BarIndex(), 1);\r\nEndBarPremarket = ValueWhen(newday == 1, BarIndex()-1, 1);\r\npremarketBarsToday = IIf( FirstBarPremarket == EndBarPremarket, 0, ValueWhen(tm &lt; EndTimePremarket, BarsSince(dn != Ref(dn, 1))));\r\n\r\n//AddColumn(BarIndex(), "BarIndex");\r\n//AddColumn(FirstBarPremarket, "FirstBarPremarket");\r\n//AddColumn(EndBarPremarket, "EndBarPremarket");\r\n\r\n//AddColumn(premarketBarsToday, "premarketBarsToday");\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CALCULATING BREAKOUT PARAMETERS\r\n\r\nYesterdayDailyHigh = ValueWhen(lastrthbar == 1, HighestSince(newday, H));\r\nYesterdayDailyLow = ValueWhen(lastrthbar == 1, LowestSince(newday, L));\r\nYesterdayDailyClose = ValueWhen(lastrthbar == 1, C);\r\nYesterdayDailyOpen = ValueWhen(newday, O);\r\nYesterdayDailyVolume = ValueWhen(lastrthbar, Sum(V, BarsSince(newday)+1));\r\nYesterdayDailyTrueRange = YesterdayDailyHigh - YesterdayDailyLow;\r\nrsidaily = RSIa( YesterdayDailyClose );\r\n\r\nTodaysHigh = Ref(HHV(High, Bars_so_far_today+1), -1);\r\nTodaysLow = Ref(LLV(Low, Bars_so_far_today+1), -1);\r\n\r\n\r\n/////\r\n//\tMUST ADD IIf( FirstBarPremarket == EndBarPremarket, 0, XXXXXX);\r\n//\tTO ALL PREMARKET CALCULATION TO ALL FOR ZERO PREMARKET BARS\r\n////\r\nPremarketHigh = IIf( FirstBarPremarket == EndBarPremarket, 0, ValueWhen( MinutesSinceOpen &lt; 0, HighestSince(newdaybar, H)));\r\nPremarketLow = IIf( FirstBarPremarket == EndBarPremarket, 0, ValueWhen( MinutesSinceOpen &lt; 0, LowestSince(newdaybar, L)));\r\n\r\nopeningOpen = ValueWhen(MinutesSinceOpen == 0, Open);\r\nopeningHigh = ValueWhen(MinutesSinceOpen == 0, High);\r\nopeningLow = ValueWhen(MinutesSinceOpen == 0, Low);\r\nopeningClose = ValueWhen(MinutesSinceOpen == 0, Close);\r\nopeningVolume = ValueWhen(MinutesSinceOpen == 0, Volume);\r\n\r\n//#########################################################################################################\r\n\r\norDifference = openingHigh - openingLow; //**\r\n\r\naboveOrMax = High &gt; openingHigh;\r\nbelowOrMin = High &lt; openingLow;\r\n\r\nhighbreakout = ExRem(aboveOrMax, newday);\r\nlowbreakout = ExRem(belowOrMin, newday);\r\n\r\n//#########################################################################################################\r\n\r\n/////\r\n//\tMUST ADD IIf( FirstBarPremarket == EndBarPremarket, 0, XXXXXX);\r\n//\tTO ALL PREMARKET CALCULATION TO ALL FOR ZERO PREMARKET BARS\r\n////\r\ndojiness = ((openingClose-openingOpen)/(openingHigh-openingLow)); //**\r\npriceinyesterdaysrange = ((Open-YesterdayDailyLow)/(YesterdayDailyHigh-YesterdayDailyLow))*100; //**\r\npriceintodaysrange = ((Open-TodaysLow)/(TodaysHigh-TodaysLow + 1e-9))*100; //**\r\n\r\npriceinpremarketrangeCALC = ((Open-PremarketLow)/(PremarketHigh-PremarketLow + 1e-9))*100; \r\npriceinpremarketrange = IIf( priceinpremarketrangeCALC &gt; 10000, 0, priceinpremarketrangeCALC); //**\r\nTodayPremarketVolume =  IIf( FirstBarPremarket == EndBarPremarket, 0, ValueWhen(MinutesSinceOpen &lt; 0, Sum(V, BarsSince(newdaybar)+1))); //**\r\n\r\n//AddColumn(priceinpremarketrange, "priceinpremarketrange");\r\n//#########################################################################################################\r\n\r\n//AddColumn (PremarketHigh, "PremarketHigh");\r\n//AddColumn (PremarketLow, "PremarketLow");\r\n//AddColumn (MinutesSinceOpen, "MinutesSinceOpen");\r\n//AddColumn (Volume, "Volume");\r\n//AddColumn (newdaybar, "newdaybar");\r\n//AddColumn (BarIndex(), "BarIndex");\r\n//AddColumn (FirstBarPremarket, "FirstBarPremarket");\r\n//AddColumn (EndBarPremarket, "EndBarPremarket");\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CALCULATING Daily parameters\r\n\r\nTimeFrameSet( inDaily );\r\n    cond = newdaybar == 1;\r\n    YesterdayDailyTrueRangeCondition = SparseCompress(cond, YesterdayDailyTrueRange);\r\n    YesterdayDailyVolumeCondition = SparseCompress(cond, YesterdayDailyVolume);\r\n    YesterdayDailyOpenCondition = SparseCompress(cond, YesterdayDailyOpen);\r\n    YesterdayDailyCloseCondition = SparseCompress(cond, YesterdayDailyClose);\r\n    rsidailyCondition = SparseCompress(cond, rsidaily);\r\n    \r\n    cond2 = newday == 1;\r\n    TodayPremarketVolumeCondition = SparseCompress(cond2, TodayPremarketVolume);\r\n   \r\nTimeFrameRestore();\r\n\r\n\r\nD1ATR = TimeFrameExpand(MA(YesterdayDailyTrueRangeCondition,1), inDaily, expandFirst ); //**\r\nD2ATR = TimeFrameExpand(MA(YesterdayDailyTrueRangeCondition,2), inDaily, expandFirst ); //**\r\nD3ATR = TimeFrameExpand(MA(YesterdayDailyTrueRangeCondition,3), inDaily, expandFirst ); //**\r\nD14ATR = TimeFrameExpand(MA(YesterdayDailyTrueRangeCondition,14), inDaily, expandFirst ); //**\r\n\r\nD1Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,1), inDaily, expandFirst ); //**\r\nD2Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,2), inDaily, expandFirst ); //**\r\nD10Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,10), inDaily, expandFirst ); //**\r\nD14Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,14), inDaily, expandFirst ); //**\r\nD20Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,20), inDaily, expandFirst ); //**\r\nD30Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,30), inDaily, expandFirst ); //**\r\nD100Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,100), inDaily, expandFirst ); //**\r\nD200Volume = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,200), inDaily, expandFirst ); //**\r\n\r\nD1PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,1), inDaily, expandFirst ); //**\r\nD2PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,2), inDaily, expandFirst ); //**\r\nD10PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,10), inDaily, expandFirst ); //**\r\nD14PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,14), inDaily, expandFirst ); //**\r\nD20PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,20), inDaily, expandFirst ); //**\r\nD30PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,30), inDaily, expandFirst ); //**\r\nD100PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,100), inDaily, expandFirst ); //**\r\nD200PremarketVolume = TimeFrameExpand(MA(TodayPremarketVolumeCondition,200), inDaily, expandFirst ); //**\r\n//AddColumn (TodayPremarketVolume, "TodayPremarketVolume");\r\n//AddColumn (D1PremarketVolume, "D1PremarketVolume");\r\n//AddColumn (D2PremarketVolume, "D2PremarketVolume");\r\n\r\nrsi1daily = TimeFrameExpand(MA(rsidailyCondition,1), inDaily, expandFirst ); //**\r\nrsi7daily = TimeFrameExpand(MA(rsidailyCondition,7), inDaily, expandFirst ); //**\r\nrsi14daily = TimeFrameExpand(MA(rsidailyCondition,14), inDaily, expandFirst ); //**\r\nrsi30daily = TimeFrameExpand(MA(rsidailyCondition,30), inDaily, expandFirst ); //**\r\nrsi60daily = TimeFrameExpand(MA(rsidailyCondition,60), inDaily, expandFirst ); //**\r\nrsi100daily = TimeFrameExpand(MA(rsidailyCondition,100), inDaily, expandFirst ); //**\r\nrsi200daily = TimeFrameExpand(MA(rsidailyCondition,200), inDaily, expandFirst ); //**\r\n\r\nD8SMA = TimeFrameExpand(MA(YesterdayDailyOpenCondition,8), inDaily, expandFirst ); //**\r\nD10SMA = TimeFrameExpand(MA(YesterdayDailyOpenCondition,10), inDaily, expandFirst ); //**\r\nD20SMA = TimeFrameExpand(MA(YesterdayDailyOpenCondition,20), inDaily, expandFirst ); //**\r\nD50SMA = TimeFrameExpand(MA(YesterdayDailyOpenCondition,50), inDaily, expandFirst ); //**\r\nD200SMA = TimeFrameExpand(MA(YesterdayDailyOpenCondition,200), inDaily, expandFirst ); //**\r\n\r\nChg8DaySMAPct = ((Open-D8SMA)/D8SMA)*100; //**\r\nChg10DaySMAPct = ((Open-D10SMA)/D10SMA)*100; //**\r\nChg20DaySMAPct = ((Open-D20SMA)/D20SMA)*100; //**\r\nChg50DaySMAPct = ((Open-D50SMA)/D50SMA)*100; //**\r\nChg200DaySMAPct = ((Open-D200SMA)/D200SMA)*100; //**\r\n\r\nytdsVolper10dVol = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,1)/MA(YesterdayDailyVolumeCondition,10), inDaily, expandFirst ); //**\r\nytdsVolper30dVol = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,1)/MA(YesterdayDailyVolumeCondition,30), inDaily, expandFirst ); //**\r\nytdsVolper100dVol = TimeFrameExpand(MA(YesterdayDailyVolumeCondition,1)/MA(YesterdayDailyVolumeCondition,100), inDaily, expandFirst ); //**\r\n\r\n//#########################################################################################################\r\n//CALCULATING In Time Frame parameters\r\n\r\nperiod2SMAopen = MA(Open, 2);\r\nperiod5SMAopen = MA(Open, 5);\r\nperiod10SMAopen = MA(Open, 10);\r\nperiod15SMAopen = MA(Open, 15);\r\nperiod20SMAopen = MA(Open, 20);\r\nperiod25SMAopen = MA(Open, 25);\r\nperiod50SMAopen = MA(Open, 50);\r\nperiod100SMAopen = MA(Open, 100);\r\n\r\nBBandTopopen22 = BBandTop(open, 2, 2);\r\nBBandBotopen22 = BBandBot(open, 2, 2);\r\nBBandTopopen52 = BBandTop(open, 5, 2);\r\nBBandBotopen52 = BBandBot(open, 5, 2);\r\nBBandTopopen102 = BBandTop(open, 10, 2);\r\nBBandBotopen102 = BBandBot(open, 10, 2);\r\nBBandTopopen152 = BBandTop(open, 15, 2);\r\nBBandBotopen152 = BBandBot(open, 15, 2);\r\nBBandTopopen202 = BBandTop(open, 20, 2);\r\nBBandBotopen202 = BBandBot(open, 20, 2);\r\nBBandTopopen302 = BBandTop(open, 30, 2);\r\nBBandBotopen302 = BBandBot(open, 30, 2);\r\nBBandTopopen502 = BBandTop(open, 50, 2);\r\nBBandBotopen502 = BBandBot(open, 50, 2);\r\n\r\nmacd26 = Ref(MACD(2, 6), -1);\r\nmacd212 = Ref(MACD(2, 12), -1);\r\nmacd515 = Ref(MACD(5, 15), -1);\r\nmacd530 = Ref(MACD(5, 30), -1);\r\nmacd545 = Ref(MACD(5, 45), -1);\r\nmacd560 = Ref(MACD(5, 60), -1);\r\nmacd1020 = Ref(MACD(10, 20), -1);\r\nmacd1030 = Ref(MACD(10, 30), -1);\r\nmacd1040 = Ref(MACD(10, 40), -1);\r\nmacd1050 = Ref(MACD(10, 50), -1);\r\nmacd1530 = Ref(MACD(15, 30), -1);\r\nmacd1545 = Ref(MACD(15, 45), -1);\r\nmacd1560 = Ref(MACD(15, 60), -1);\r\nmacd1575 = Ref(MACD(15, 75), -1);\r\n\r\n//#########################################################################################################\r\n\r\ntodaysGap = openingOpen - YesterdayDailyClose;  //**\r\nABStodaysGap = abs(todaysGap); //**\r\ntodaysGapATR = (todaysGap/YesterdayDailyClose)/D14ATR; //**\r\ntodaysGapPercent = (todaysGap/YesterdayDailyClose)*100; //**\r\n\r\n//#########################################################################################################\r\n\r\npreMarketHigh = ValueWhen(BarIndex() == EndBarPremarket, HighestSince(BarIndex() == FirstBarPremarket, High));\r\npreMarketLow = ValueWhen(BarIndex() == EndBarPremarket, LowestSince(BarIndex() == FirstBarPremarket, Low));\r\n\r\npreRange = preMarketHigh - preMarketLow; //**\r\npreRangepercent = ((preMarketHigh - preMarketLow)/preMarketLow); //**\r\npreRangeATR = preRange/D14ATR; //**\r\n\r\n//#########################################################################################################\r\n\r\norDifferenceATR = orDifference/D14ATR; //**\r\norDirection = openingOpen - openingClose; //**\r\norDirectionATR = orDirection/D14ATR; //**\r\n\r\ndistancebelowOR = openingLow - TodaysLow; //**\r\ndistancebelowORATR = (openingLow - TodaysLow)/D14ATR; //**\r\ndistancebehighOR = TodaysHigh - openingHigh; //**\r\ndistancebehighORATR = (TodaysHigh - openingHigh)/D14ATR; //**\r\n\r\n//#########################################################################################################\r\nopeningbarvolume = ValueWhen(MinutesSinceOpen == 0, Volume); //**\r\n\t\r\nopeningbarvolumeDaily = TimeFrameCompress(openingbarvolume, inDaily);\r\nD14AvgVolumeDaily = MA(openingbarvolumeDaily, 14); \r\nD14avgopeningbarvolume = TimeFrameExpand(D14AvgVolumeDaily, inDaily); //**\r\n\r\nD2AvgVolumeDaily = MA(openingbarvolumeDaily, 2); \r\nD2avgopeningbarvolume = TimeFrameExpand(D2AvgVolumeDaily, inDaily); //**\r\nD1AvgVolumeDaily = MA(openingbarvolumeDaily, 1);\r\nD1avgopeningbarvolume = TimeFrameExpand(D1AvgVolumeDaily, inDaily); //**\r\n\r\nD14relopenvolpct5min = ((openingbarvolume/D14avgopeningbarvolume) * 100); //**\r\n//#########################################################################################################\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CALCULATING SYSTEM ENTRY PARAMETERS\r\n\r\nema144 = EMA(open, 144);\r\nema312 = EMA(open, 312);\r\nmacd144312 = ema144 - ema312;\r\n\r\nema144minus1 = EMA(Ref(Open, -1), 144);\r\nema312minus1 = EMA(Ref(Open, -1), 312);\r\nmacd144312minus1 = ema144minus1 - ema312minus1;\r\n\r\nAddColumn( macd144312, "macd144312", 1.5 );\r\nAddColumn( macd144312minus1, "macd144312minus1", 1.5 );\r\n\r\nsystemcondition1 = IIf(macd144312 &gt; 0, 1, 0);\r\nsystemcondition2 = IIf(macd144312minus1 &lt; 0, 1, 0);\r\n\r\n\r\nsystemconditionSum = systemcondition1+systemcondition2;\r\nwithinsystemconditionParamters = IIf(systemconditionSum == 2, 1, 0);\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CHECK IF BUY IS FOUND USING SIMPLE CUTOFFS THAT ARE NOT SYSTEM SPECIFIC\r\n\r\nmatchingSignal = IIf(withinsystemconditionParamters == 1 AND TimeNum() &gt;= minTimeToEnter AND TimeNum() &lt;= maxTimeToEnter\r\n\t\t\tAND D14ATR &gt; D14ATRcutoff AND D14Volume &gt; D14minvolume, 1, 0);\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CHECK IF THIS IS THE FIRST MATCHING BUY TODAY\r\nmatchingBuy = ExRem(matchingSignal, lastrthbar);\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CHECK IF BUY IS FOUND WITH SYSTEM SPECIFIC OPTIMIZATIONS\r\n\r\ncondition1 = IIf(macd212 &gt;= macd212MIN, 1, 0);\r\ncondition2 = IIf(macd212 &lt;= macd212MAX, 1, 0);\r\ncondition3 = IIf(rsi60daily &gt;= rsi60dailyMIN, 1, 0);\r\ncondition4 = IIf(rsi60daily &lt;= rsi60dailyMAX, 1, 0);\r\ncondition5 = IIf(ABStodaysGap &gt;= ABStodaysGapMIN, 1, 0);\r\ncondition6 = IIf(ABStodaysGap &lt;= ABStodaysGapMAX, 1, 0);\r\ncondition7 = IIf(D200SMA &gt;= D200SMAMIN, 1, 0);\r\ncondition8 = IIf(D200SMA &lt;= D200SMAMAX, 1, 0);\r\ncondition9 = IIf(BBandTopopen152 &gt;= BBandTopopen152MIN, 1, 0);\r\ncondition10 = IIf(BBandTopopen152 &lt;= BBandTopopen152MAX, 1, 0);\r\ncondition11 = IIf(D14Volume &gt;= D14VolumeMIN, 1, 0);\r\ncondition12 = IIf(D14Volume &lt;= D14VolumeMAX, 1, 0);\r\ncondition13 = IIf(D14ATR &gt;= D14ATRMIN, 1, 0);\r\ncondition14 = IIf(D14ATR &lt;= D14ATRMAX, 1, 0);\r\nconditionSum = condition1+condition2+condition3+condition4+condition5+condition6+condition7+condition8+condition9+condition10+condition11+condition12+condition13+condition14;\r\nwithinOptimizedParamters = IIf(conditionSum == 14, 1, 0);\r\n\r\nmatchingBuyOPT = IIf(matchingBuy == 1 AND withinOptimizedParamters == 1, 1, 0);\t\t\t\r\n\t\t\r\n\r\nAddColumn(condition1, "condition1");\r\nAddColumn(condition2, "condition2");\r\nAddColumn(condition3, "condition3");\r\nAddColumn(condition4, "condition4");\r\nAddColumn(condition5, "condition5");\r\nAddColumn(condition6, "condition6");\r\nAddColumn(condition7, "condition7");\r\nAddColumn(condition8, "condition8");\r\nAddColumn(condition9, "condition9");\r\nAddColumn(condition10, "condition10");\r\nAddColumn(condition11, "condition11");\r\nAddColumn(condition12, "condition12");\r\nAddColumn(condition13, "condition13");\r\nAddColumn(condition14, "condition14");\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//CALCULATE POSITION SIZING AND ENTRY AND EXIT PRICES AND ENTRY TRIGGER\r\n\r\npositionSizeFactor = D14ATR;\r\nRvalue = positionSizeFactor*stopMultiple;\r\n\r\nEntryStopPrice = Open + 0.01;\r\nEntryLimitPrice = Open + (0.05*positionSizeFactor*stopMultiple);\r\nEntryLoss = Open - Rvalue;\r\nEntryProfit = Open + (positionSizeFactor*profitRmultiple);\r\n\r\nif ( optimizedParameters == 0)\r\n{\r\n\tentrytrigger = matchingBuy;\r\n}\r\nif ( optimizedParameters == 1)\r\n{\r\n\tentrytrigger = matchingBuyOPT;\r\n}\r\n\t\t\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//ADDING BACKTESTING LOGIC\r\n\r\nif (addbacktestinglogic == 1)\r\n{\r\n\tbuyFound = 0;\r\n\tbuyMatchesArray = 0;\r\n\tstopLossHitPrice = Null;\r\n\tprofitTargetHitPrice = Null;\r\n\tentryPrice = Null;\r\n\texitPrice = Null;\r\n\tmatchingExitHit = Null;\r\n\tmatchingEntryHit = Null;\r\n/// \r\n\tfor ( i = 0; i &lt; BarCount; i++)\r\n\t{\t\t\t\r\n\t\t\r\n\t\tif ( entrytrigger[i] == 1 )\r\n\t\t{\r\n\t\t\tbuyMatches = 0;\r\n\t\t\t\r\n\t\t\tj = i-1; \r\n\t\t\twhile( yr[j] == yr[i] AND dy[j] == dy[i] AND mnth[j] == mnth[i] AND j &gt; 0 )\r\n\t\t\t{\r\n\t\t\t\tif ( entrytrigger[j] == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tbuyMatches = buyMatches + 1;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tj = j - 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbuyMatchesArray[i] = buyMatches;\r\n\t\t\tif ( buyMatches == 0 )\r\n\t\t\t{\r\n\t\t\t\tif ( entrytrigger[i] == 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tj = 0; //starting a j = 1 to start counting from the executed trade\r\n\t\t\t\t\twhile( j+i &lt; BarCount AND yr[j+i] == yr[i] AND dy[j+i] == dy[i] AND mnth[j+i] == mnth[i] AND MinutesSinceOpen[j+i] &lt; 390 AND MinutesSinceOpen[j+i] &gt;= 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbuyFound[i+j] = 1;\r\n\t\t\t\t\t\tj = j + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif ( buyFound[i] == 1 &amp;&amp; MinutesSinceOpen[i] &lt; 390 &amp;&amp; MinutesSinceOpen[i] &gt;= 0 )\r\n\t\t{\t\r\n\t\t\t\r\n\t\t\tif ( High[i] &gt; EntryProfit[i] AND entrytrigger[i] != 1 AND IsNull(stopLossHitPrice[i-1]) OR NOT IsNull(profitTargetHitPrice[i-1]) ) \r\n\t\t\t{\r\n\t\t\t\t//_TRACEF(NumToStr(Entries));\r\n\t\t\t\tprofitTargetHitPrice[i] = EntryProfit[i];\r\n\t\t\t}\r\n\t\t\tif ( NOT IsNull(profitTargetHitPrice[i-1]))\r\n\t\t\t{\r\n\t\t\t\tprofitTargetHitPrice[i] = profitTargetHitPrice[i-1]; \r\n\t\t\t}\r\n\t\t\tif ( Low[i] &lt; EntryLoss[i] AND entrytrigger[i] != 1 AND IsNull(profitTargetHitPrice[i-1]) OR NOT IsNull(stopLossHitPrice[i-1]) )\r\n\t\t\t{\r\n\t\t\t\tstopLossHitPrice[i] = EntryLoss[i];\r\n\t\t\t}\r\n\t\t\tif ( NOT IsNull(stopLossHitPrice[i-1]))\r\n\t\t\t{\r\n\t\t\t\tstopLossHitPrice[i] = stopLossHitPrice[i-1];\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif ( entrytrigger[i] == 1 )\r\n\t\t{\r\n\t\t\tfor ( k = 0; k &lt; tradegoodforbars; k++)\r\n\t\t\t{\r\n\t\t\t\tif ( i+k &lt; BarCount-1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( yr[i+k] == yr[i] AND dy[i+k] == dy[i] AND mnth[i+k] == mnth[i] AND i+k &lt; BarCount-1 AND MinutesSinceOpen[i+k] &lt; 390 AND MinutesSinceOpen[i+k] &gt;= 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( (Low[i+k] &lt;= EntryLimitPrice[i+k] AND High[i+k] &gt;= EntryStopPrice[i+k]) )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tentryPrice[i] = EntryStopPrice[i];\r\n\t\t\t\t\t\t\tmatchingEntryHit[i+k] = EntryStopPrice[i+k];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor ( i = 0; i &lt; BarCount; i++)\r\n\t{\r\n\t\tif ( entrytrigger[i] == 1 /*OR matchingShort[i] == 1*/ )\r\n\t\t{\r\n\t\t\tj = 0;\r\n\t\t\twhile( yr[j+i] == yr[i] AND dy[j+i] == dy[i] AND mnth[j+i] == mnth[i] AND j+i &lt; BarCount-1 AND MinutesSinceOpen[j+i] &lt; 390 AND MinutesSinceOpen[j+i] &gt;= 0)\r\n\t\t\t{\r\n\t\t\t\tif ( NOT IsNull(stopLossHitPrice[j+i]) )\r\n\t\t\t\t{\r\n\t\t\t\t\texitPrice[j+i] = stopLossHitPrice[j+i];\r\n\t\t\t\t\tmatchingExitHit[j+i] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif ( NOT IsNull(profitTargetHitPrice[j+i]) )\r\n\t\t\t\t{\r\n\t\t\t\t\texitPrice[j+i] = profitTargetHitPrice[j+i];\r\n\t\t\t\t\tmatchingExitHit[j+i] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif ( MinutesSinceOpen[j+i] &gt;= 375 AND MinutesSinceOpen[j+i] &lt;= 389 AND IsNull(stopLossHitPrice[j+i]) AND IsNull(profitTargetHitPrice[j+i]) AND IsNull(exitPrice[i]) )\r\n\t\t\t\t{\r\n\t\t\t\t\texitPrice[j+i] = Close[j+i];\r\n\t\t\t\t\tmatchingExitHit[j+i] = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tj = j + 1;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor ( i = 0; i &lt; BarCount; i++)\r\n\t{\r\n\t\tBuy[i] = entrytrigger[i] == 1 AND NOT IsNull(entryPrice[i]);\r\n\t\tBuyPrice[i] = entryPrice[i];\r\n\t\tSell[i] = matchingExitHit[i] == 1;\r\n\t\tSellPrice[i] = exitPrice[i];\r\n\t} \r\n\t\r\n\tstopamount = abs(EntryStopPrice-EntryLoss);\r\n\tpositionSizeShares = int(RSizeDollars/stopamount);\r\n\tSetPositionSize( positionSizeShares, spsShares ); \r\n\t\r\n\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//ADDING TRADE ENTRY LOGIC\r\n\r\nif ( addtradeentrylogic == 1 AND BarCount &gt; scanback )\r\n{\r\n\r\n\r\n\tpositionSizeSharesBuy = positionSizeShares;\r\n\tibc = GetTradingInterface("IB");\r\n\t\r\n\t//AddColumn (BarCount-1, "BarCount-1");\r\n\t//AddColumn (BarCount, "BarCount");\r\n\t//AddColumn (BarCount-scanback, "BarCount-scanback");\r\n\r\n\tfor ( i = BarCount-1; i &gt; BarCount-scanback; i--)\r\n\t{\r\n\t\t//_TRACE(" i = "+NumToStr(i));\r\n\t\t//_TRACE(" barcount = "+NumToStr(BarCount));\r\n\t\t//_TRACE(" entrytrigger[ i ] = "+NumToStr(entrytrigger[ i ]));\r\n\t\tif ( entrytrigger[ i ] == 1 )\r\n\t\t{\r\n\t\t\t//_TRACE(ibc.GetPendingList( 1, "" ));\r\n\t\t\tif( ibc.GetPositionSize( Name() ) == 0 AND NOT StrFind(ibc.GetPendingList( 1, "ApiPending" ), Name()) AND NOT StrFind(ibc.GetPendingList( 1, "PreSubmitted" ), Name()) AND NOT StrFind(ibc.GetPendingList( 1, "Submitted" ), Name()) AND NOT StrFind(ibc.GetPendingList( 1, "Error" ), Name()) AND ibc.IsConnected())\r\n\t\t\t{\r\n\t\t\t\t_TRACE("Trade Time: "+DateTimeFormat("%Y%m%d %H:%M:%S", dt[i]));\r\n\t\t\t\tGTDdatetime = DateTimeAdd( dt[i], 30, in1Minute );\r\n\t\t\t\t_TRACE("Order Valid Until: "+DateTimeFormat("%Y%m%d %H:%M:%S", GTDdatetime));\r\n\t\t\t\tdt_string = DateTimeFormat("%Y%m%d %H:%M:%S", GTDdatetime );\r\n\t\t\t\tday_string = DateTimeFormat("%Y%m%d", GTDdatetime );\r\n\t\t\t\t\r\n\t\t\t\tif ( positionSizeSharesBuy[i] AND EntryLimitPrice[i] AND EntryStopPrice[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t_TRACEF("............Debugging Place Order Code............");\r\n\t\t\t\t\t_TRACEF(NumToStr(positionSizeSharesBuy[i], format = 1.0));\r\n\t\t\t\t\t_TRACEF(NumToStr(EntryLimitPrice[i], format = 1.2));\r\n\t\t\t\t\t_TRACEF(NumToStr(EntryStopPrice[i], format = 1.2));\r\n\t\t\t\t\t_TRACEF( "GTD "+dt_string+" US/Eastern "+Name() );\r\n\t\t\t\t\t_TRACEF(dt_string+Name());\r\n\t\t\t\t\t//Setting parent STOP LIMIT\r\n\t\t\t\t\tparentID = ibc.PlaceOrder(Name(), "BUY", NumToStr(positionSizeSharesBuy[i], format = 1.0), "STPLMT", NumToStr(EntryLimitPrice[i], format = 1.2), NumToStr(EntryStopPrice[i], format = 1.2), "GTD "+dt_string+" US/Eastern", False, 100, "", "", dt_string+Name() );\r\n\t\t\t\t\t_TRACE( "GTD "+day_string+" 16:59:00 US/Eastern; GTA "+day_string+" 16:47:00 US/Eastern" );\r\n\t\t\t\t\t//Setting STOP for EOD\r\n\t\t\t\t\tibc.PlaceOrder(Name(), "SELL", NumToStr(positionSizeSharesBuy[i]), "MKT", 0, 0, "GTD "+day_string+" 16:05:00 US/Eastern;GAT "+day_string+" 15:45:00 US/Eastern", False, 100, "", parentID, dt_string+Name() );\r\n\t\t\t\t\t//Setting STOP for System\r\n\t\t\t\t\t_TRACE(NumToStr(EntryLoss[i], 1.2));\r\n\t\t\t\t\tibc.PlaceOrder(Name(), "SELL", NumToStr(positionSizeSharesBuy[i]), "STP", 0, NumToStr(EntryLoss[i], 1.2), "DAY", False, 100, "", parentID, dt_string+Name() );\r\n\t\t\t\t\t//Setting TAKE PROFIT STOP\r\n\t\t\t\t\t_TRACE(NumToStr(EntryProfit[i], 1.2));\r\n\t\t\t\t\tibc.PlaceOrder(Name(), "SELL", NumToStr(positionSizeSharesBuy[i]), "LMT", NumToStr(EntryProfit[i], 1.2), 0, "DAY", True, 100, "", parentID, dt_string+Name() );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t_TRACEF( "ERROR with trade" );\r\n\t\t\t\t_TRACEF( "ERROR SYMBOL: "+Name() );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//ADDING NOTIFICATION VIA EMAIL AND SLACK\r\n\r\n\r\ntradelogPath = "C:\\\\Program Files\\\\AmiBroker\\\\Reports";\r\n\r\n\r\nif ( BarCount &gt; scanback )\r\n{\r\n\r\n\r\n\tfor ( i = BarCount-1; i &gt; BarCount-scanback; i--)\r\n\t{\r\n\r\n\t\tif ( entrytrigger[ i ] == 1 )\r\n\t\t{\r\n\t\t\tmatchingBuyMessageFirst = "{\\"text\\":\\"################\\n"+\r\n\t\t\t"OPT PARM = LATEST SCRIPT \\n"+\r\n\t\t\t"FIRST BUY IDENTIFIED!! \\n"+\r\n\t\t\t"  "+Name()+"\\n"+\r\n\t//\t\t"  on "+mnth+"/"+dy+" "+Hr+" "+Mn+"\\n"+\r\n\t\t\t"  on "+DateTimeToStr(dt[i])+"\\n"+\r\n\t\t\t"  "+NumToStr(positionSizeShares[i], format = 1.0)+" shares\\n"+\r\n\t\t\t"################\\n"+\r\n\t\t\t"entrytrigger[i] == "+NumToStr(entrytrigger[i])+"\\n"+\r\n\t\t\t"matchingBuy[i] == "+NumToStr(matchingBuy[i])+"\\n"+\r\n\t\t\t"dt[i] == "+DateTimeToStr(dt[i])+"\\n"+\r\n\t\t\t"Low[i] = "+NumToStr(Low[i])+"\\n"+\r\n\t\t\t"EntryStopPrice[i] = "+NumToStr(EntryStopPrice[i])+"\\n"+\r\n\t\t\t"High[i] = "+NumToStr(High[i])+"\\n"+\r\n\t\t\t"EntryLimitPrice[i] = "+NumToStr(EntryLimitPrice[i])+"\\n"+\r\n\t\t\t"dt[i] == "+DateTimeToStr(dt[i])+"\\n"+\r\n\t\t\t"High[i] = "+NumToStr(High[i])+"\\n"+\r\n\t\t\t"EntryLoss[i] = "+NumToStr(EntryLoss[i])+"\\n"+\r\n\t\t\t"Low[i] = "+NumToStr(Low[i])+"\\n"+\r\n\t\t\t"EntryProfit[i] = "+NumToStr(EntryProfit[i])+"\\n"+\r\n\t\t\t"################\\n\\"}";\r\n\t\t\t//_TRACEF(matchingBuyMessageFirst);\r\n\t\t\tih = InternetPostRequest( "https://hooks.slack.com/services/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", matchingBuyMessageFirst, 1+2+4+8 );\r\n\t\t\tif( ih )\r\n\t\t\t{\r\n\t\t\t\tInternetClose( ih );\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tprintf("Your URL is bad !");\r\n\t\t\t}\r\n\t\t\t//break;\r\n\t\t\r\n\t\t// Open the file for writing\r\n\t\t\tfh = fopen(tradelogPath+"\\\\"+Name()+"_"+DateTimeFormat("%Y%m%d%H%M", dt[i])+"_"+DateTimeFormat("%Y%m%d%H%M", Now(format=5))+".csv", "w");\r\n\t\t\t_TRACEF(tradelogPath+"\\\\"+Name()+"_"+DateTimeFormat("%Y%m%d%H%M", dt[i])+".csv");\r\n\t\t\t_TRACEF(DateTimeFormat("%Y%m%d%H%M", Now(format=5)));\r\n\t\t\t// Check if the file is opened successfully\r\n\t\t\tif (fh)\r\n\t\t\t{\r\n\t\t\t\t// Write the header line fputs("Ticker,Date,Open,High,Low,Close,Volume,matchingBuy,entrytrigger,todaysGapATR,preRangeATR,ytdsVolper100dVol,,D14ATR,priceintodaysrange\\n", fh);\r\n\t\t\t\tfputs("Ticker,Date,Open,High,Low,Close,Volume\\n", fh);\r\n\r\n\t\t\t\t// Loop through each bar and write data\r\n\t\t\t\tfor ( j = i; j &gt; i-500; j-- )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( BarCount &gt; 500 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Format the data as a CSV line\r\n\t\t\t\t\t\tline = Name() + "," +\r\n\t\t\t\t\t\t\t   DateTimeToStr(dt[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(Open[j], 1.2) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(High[j], 1.2) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(Low[j], 1.2) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(Close[j], 1.2) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(Volume[j], 1.0, separator=False) + "\\n"; /*+\r\n\t\t\t\t\t\t\t   NumToStr(matchingBuyFirst[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(matchingShortFirst[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(todaysGapATR[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(preRangeATR[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(ytdsVolper100dVol[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(rsi2fivemin[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(D14ATR[j]) + "," +\r\n\t\t\t\t\t\t\t   NumToStr(priceintodaysrange[j]) + "\\n"; */\r\n\t\t\t\t\t\t// Write the line to the file\r\n\t\t\t\t\t\tfputs(line, fh);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Close the file\r\n\t\t\t\tfclose(fh);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Handle the error if the file could not be opened\r\n\t\t\t\tprintf("Error: Unable to open file for writing.");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//ADDING ANALYSIS WINDOWS VARIABLES\r\n\r\n//AddColumn (firstBreakout, "fstBO", 1, colorDefault, IIf( firstBreakout == 1, ColorRGB( 0, 255, 0 ) , colorDefault));\r\n\r\nAddColumn (matchingSignal, "mhSig", 1, colorDefault, IIf( matchingSignal == 1, ColorRGB( 255, 102, 102 ) , colorDefault));\r\nAddColumn (matchingBuy, "mhBy", 1, colorDefault, IIf( matchingBuy == 1, ColorRGB( 255, 153, 51 ), colorDefault));\r\nAddColumn (optimizedParameters, "optParam", 1, colorDefault, IIf( optimizedParameters == 1, ColorRGB( 178, 102, 255 ), colorDefault));\r\nAddColumn (matchingBuyOPT, "mhByOPT", 1, colorDefault, IIf( matchingBuyOPT == 1, ColorRGB( 153, 255, 51 ), colorDefault));\r\nAddColumn (entrytrigger, "entyTrig", 1, colorDefault, IIf( entrytrigger == 1, ColorRGB( 51, 255, 255 ), colorDefault));\r\n\r\n//AddColumn (matchingBuyTrade, "mchBT", 1, colorDefault, IIf( matchingBuyTrade == 1, ColorRGB( 153, 255, 51 ), colorDefault));\r\n//AddColumn (Buy, "Buy", 1, colorDefault, IIf( Buy == 1, ColorRGB( 51, 255, 255 ), colorDefault));\r\nAddColumn (buyFound, "byFnd", 1, colorDefault, IIf( buyFound == 1, ColorRGB( 178, 102, 255 ), colorDefault));\r\nAddColumn (newday, "newday");\r\nAddColumn (newdayBar, "newdayBar");\r\nAddColumn (lastrthbar, "lastrthbar");\r\n//AddColumn (lowBreak, "lowBk", 1, colorDefault, IIf( lowBreak == 1, ColorRGB( 255, 102, 102 ), colorDefault));\t\r\n//AddColumn (matchingShort, "mchSht", 1, colorDefault, IIf( matchingShort == 1, ColorRGB( 255, 153, 51 ), colorDefault));\r\n//AddColumn (matchingShortFirst, "mchSF", 1, colorDefault, IIf( matchingShortFirst == 1, ColorRGB( 255, 255, 51 ), colorDefault));\r\n//AddColumn (matchingShortTrade, "mchST", 1, colorDefault, IIf( matchingShortTrade == 1, ColorRGB( 153, 255, 51 ), colorDefault));\r\n//AddColumn (Short, "Short", 1, colorDefault, IIf( Short == 1, ColorRGB( 51, 255, 255 ), colorDefault));\r\n//AddColumn (shortFound, "shtFnd", 1, colorDefault, IIf( shortFound == 1, ColorRGB( 178, 102, 255 ), colorDefault));\r\n\r\n//AddColumn (entryPrice, "entryPrice");\r\n//AddColumn (exitPrice, "exitPrice");\r\n//AddColumn (matchingExitHit, "matchingExitHit");\r\n//AddColumn (positionSizeShares, "positionSizeShares");\t\r\n\r\n//open,close,openingOpen,openingClose,orMax,orMin,orDifference,aboveOrMax,belowOrMin,D1ATR,D14ATR\r\n//BarTesting = "matchingBuy,open,close,orMax,orMin,openingOpen,openingClose,newday,lastrthbar,highbreakout,lowbreakout";\r\n//BarTesting = "highbreakout,High,MinutesSinceOpen,matchingBuy,buyFound,MinutesSinceOpen,EntryStopPrice,EntryLimitPrice,EntryLoss,EntryProfit,stopLossHitPrice,profitTargetHitPrice,entryPrice,exitPrice,matchingExitHit";\r\n//BarTesting = "highbreakout";\r\n\r\n//AddColumn (YesterdayDailyVolume, "YesterdayDailyVolume");\r\n//AddColumn (D1Volume, "D1Volume");\r\n//AddColumn (lastrthbar, "lastrthbar");\r\n//AddColumn (ytdsVolper10dVol, "ytdsVolper10dVol");\r\n//AddColumn (condition3, "condition3");\r\n\r\nBarTesting = "todaysGapPercent,D14ATR,EntryStopPrice,EntryLimitPrice,EntryLoss,EntryProfit,stopLossHitPrice,profitTargetHitPrice,entryPrice,exitPrice";\r\n\r\n//BarTesting = "dojiness,openingClose,openingOpen,openingHigh,openingLow";\r\n\r\nfor (item = 0; (metric = StrExtract(BarTesting, item)) != ""; item++) \r\n{\r\n\tlabel = metric;\r\n\tvalue = VarGet( label );\r\n\tAddColumn( value, label, 1.5 );\r\n}\r\n\r\n\r\n\r\n/*\r\nAddColumn (condition1, "condition1");\r\nAddColumn (condition2, "condition2");\r\nAddColumn (condition3, "condition3");\r\nAddColumn (condition4, "condition4");\r\nAddColumn (condition5, "condition5");\r\nAddColumn (condition6, "condition6"); \r\nAddColumn (condition7, "condition7");\r\nAddColumn (condition8, "condition8");\r\nAddColumn (condition9, "condition9");\r\nAddColumn (condition10, "condition10");\r\nAddColumn (condition11, "condition11");\r\nAddColumn (condition12, "condition12"); \r\nAddColumn (condition13, "condition13"); \r\nAddColumn (condition14, "condition14"); \t\t*/\r\n\t\t\r\n\t\r\n\r\nif (addColumnsToExploration == 1)\r\n{\r\n\tBarColumns = "bar23range,Bars_so_far_today,TodaysHigh,openingLow,TodaysLow,orDifference,orDifferenceATR,orDirection,orDirectionATR,dojiness,distancebelowOR,distancebelowORATR,distancebehighOR,distancebehighORATR,priceinyesterdaysrange,priceinpremarketrange,priceintodaysrange,"+\r\n\t\t"period2SMAopen,period5SMAopen,period10SMAopen,period15SMAopen,period20SMAopen,period25SMAopen,period50SMAopen,period100SMAopen,"+\r\n\t\t"D8SMA,D10SMA,D20SMA,D50SMA,D200SMA,Chg8DaySMAPct,Chg10DaySMAPct,Chg20DaySMAPct,Chg50DaySMAPct,Chg200DaySMAPct,"+\r\n\t\t"BBandTopopen22,BBandBotopen22,BBandTopopen52,BBandBotopen52,BBandTopopen102,BBandBotopen102,BBandTopopen152,BBandBotopen152,BBandTopopen202,BBandBotopen202,BBandTopopen302,BBandBotopen302,BBandTopopen502,BBandBotopen502,macd26,macd212,macd515,macd530,macd545,macd560,macd1020,macd1030,macd1040,macd1050,macd1530,macd1545,macd1560,macd1575,"+\r\n\t\t"YesterdayDailyTrueRange,D1ATR,D2ATR,D3ATR,D14ATR,YesterdayDailyVolume,D1Volume,D2Volume,D10Volume,D14Volume,D20Volume,D100Volume,D200Volume,"+\r\n\t\t"TodayPremarketVolume,D1PremarketVolume,D2PremarketVolume,D10PremarketVolume,D14PremarketVolume,D20PremarketVolume,D30PremarketVolume,D100PremarketVolume,D200PremarketVolume,"+\r\n\t\t"rsidaily,rsi1daily,rsi7daily,rsi14daily,rsi30daily,rsi60daily,rsi100daily,rsi200daily,"+\r\n\t\t"ytdsVolper10dVol,ytdsVolper30dVol,ytdsVolper100dVol,todaysGap,ABStodaysGap,todaysGapATR,todaysGapPercent,preRangepercent,preRangeATR,openingbarvolume,"+\r\n\t\t"D14avgopeningbarvolume,D2avgopeningbarvolume,D1avgopeningbarvolume,D14relopenvolpct5min";\r\n\r\n\tfor (item = 0; (metric = StrExtract(BarColumns, item)) != ""; item++) \r\n\t{\r\n\t\tlabel = metric;\r\n\t\tvalue = VarGet( label );\r\n\t\tAddColumn( value, label, 1.5 );\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nif (filtering == 0)\r\n{\r\n\tFilter = 1;\r\n\tSetSortColumns( -2 );\r\n}\r\n\r\nif (filtering == 1)\r\n{\r\n\tFilter = matchingBuy == 1;\r\n\tSetSortColumns( -7, -2 );\r\n}\r\n\r\nif (filtering == 2)\r\n{\r\n\tFilter = matchingBuyOPT == 1;\r\n}\r\n\r\nif (filtering == 3)\r\n{\r\n\tFilter = matchingSignal == 1;\r\n\tSetSortColumns( -3, -2 );\r\n}\r\nif (filtering == 4)\r\n{\r\n\tFilter = newday == 1;\r\n\tSetSortColumns( -3, -2 );\r\n}\r\n</FormulaContent>
<ApplyTo>0</ApplyTo>
<RangeType>3</RangeType>
<RangeAmount>1</RangeAmount>
<FromDate>2021-12-16 00:00:00</FromDate>
<ToDate>2024-12-16</ToDate>
<SyncOnSelect>1</SyncOnSelect>
<RunEvery>1</RunEvery>
<RunEveryInterval>10s</RunEveryInterval>
<IncludeFilter>
<ExcludeMode>0</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>185</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</IncludeFilter>
<ExcludeFilter>
<ExcludeMode>1</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>-1</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</ExcludeFilter>
</General>
<BacktestSettings>
<InitialEquity>1e+09</InitialEquity>
<TradeFlags>2</TradeFlags>
<MaxLossStopMode>0</MaxLossStopMode>
<MaxLossStopValue>0</MaxLossStopValue>
<MaxLossStopAtStop>0</MaxLossStopAtStop>
<ProfitStopMode>0</ProfitStopMode>
<ProfitStopValue>0</ProfitStopValue>
<ProfitStopAtStop>0</ProfitStopAtStop>
<TrailingStopMode>0</TrailingStopMode>
<TrailingStopPeriods>0</TrailingStopPeriods>
<TrailingStopValue>0</TrailingStopValue>
<TrailingStopAtStop>0</TrailingStopAtStop>
<CommissionMode>1</CommissionMode>
<CommissionValue>0</CommissionValue>
<BuyPriceField>0</BuyPriceField>
<BuyDelay>0</BuyDelay>
<SellPriceField>0</SellPriceField>
<SellDelay>0</SellDelay>
<ShortPriceField>0</ShortPriceField>
<ShortDelay>0</ShortDelay>
<CoverPriceField>0</CoverPriceField>
<CoverDelay>0</CoverDelay>
<ReportSystemFormula>0</ReportSystemFormula>
<ReportSystemSettings>0</ReportSystemSettings>
<ReportOverallSummary>1</ReportOverallSummary>
<ReportSummary>1</ReportSummary>
<ReportTradeList>1</ReportTradeList>
<LoadRemainingQuotes>1</LoadRemainingQuotes>
<Periodicity>4</Periodicity>
<InterestRate>0</InterestRate>
<ReportOutPositions>1</ReportOutPositions>
<UseConstantPriceArrays>0</UseConstantPriceArrays>
<PointsOnlyTest>0</PointsOnlyTest>
<AllowShrinkingPosition>1</AllowShrinkingPosition>
<RangeType>3</RangeType>
<RangeLength>0</RangeLength>
<RangeFromDate>2021-12-16 00:00:00</RangeFromDate>
<RangeToDate>2024-12-16</RangeToDate>
<ApplyTo>0</ApplyTo>
<FilterQty>2</FilterQty>
<IncludeFilter>
<ExcludeMode>0</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>185</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</IncludeFilter>
<ExcludeFilter>
<ExcludeMode>1</ExcludeMode>
<OrSelection>0</OrSelection>
<Favourite>0</Favourite>
<Index>0</Index>
<Type0>0</Type0>
<Category0>-1</Category0>
<Type1>1</Type1>
<Category1>-1</Category1>
<Type2>2</Type2>
<Category2>-1</Category2>
<Type3>3</Type3>
<Category3>-1</Category3>
<Type4>4</Type4>
<Category4>-1</Category4>
<Type5>5</Type5>
<Category5>-1</Category5>
<Type6>6</Type6>
<Category6>-1</Category6>
</ExcludeFilter>
<UseOptimizedEvaluation>0</UseOptimizedEvaluation>
<BacktestRangeType>3</BacktestRangeType>
<BacktestRangeLength>0</BacktestRangeLength>
<BacktestRangeFromDate>2024-12-16 00:00:00</BacktestRangeFromDate>
<BacktestRangeToDate>2024-12-16</BacktestRangeToDate>
<MarginRequirement>100</MarginRequirement>
<SameDayStops>0</SameDayStops>
<RoundLotSize>0</RoundLotSize>
<TickSize>0</TickSize>
<DrawdownPriceField>0</DrawdownPriceField>
<ReverseSignalForcesExit>0</ReverseSignalForcesExit>
<NoDefaultColumns>0</NoDefaultColumns>
<AllowSameBarExit>1</AllowSameBarExit>
<ExtensiveOptimizationWarning>1</ExtensiveOptimizationWarning>
<WaitForBackfill>1</WaitForBackfill>
<MaxRanked>4</MaxRanked>
<MaxTraded>1000</MaxTraded>
<MaxTracked>100</MaxTracked>
<PortfolioReportMode>0</PortfolioReportMode>
<MinShares>0.01</MinShares>
<SharpeRiskFreeReturn>5</SharpeRiskFreeReturn>
<PortfolioMode>0</PortfolioMode>
<PriceBoundCheck>1</PriceBoundCheck>
<AlignToReferenceSymbol>0</AlignToReferenceSymbol>
<ReferenceSymbol>^DJI</ReferenceSymbol>
<UPIRiskFreeReturn>5.4</UPIRiskFreeReturn>
<NBarStopMode>1</NBarStopMode>
<NBarStopValue>150</NBarStopValue>
<NBarStopReentryDelay>0</NBarStopReentryDelay>
<MaxLossStopReentryDelay>0</MaxLossStopReentryDelay>
<ProfitStopReentryDelay>0</ProfitStopReentryDelay>
<TrailingStopReentryDelay>0</TrailingStopReentryDelay>
<AddFutureBars>0</AddFutureBars>
<DistChartSpacing>5</DistChartSpacing>
<ProfitDistribution>1</ProfitDistribution>
<MAFEDistribution>1</MAFEDistribution>
<IndividualDetailedReports>0</IndividualDetailedReports>
<PortfolioReportTradeList>1</PortfolioReportTradeList>
<LimitTradeSizeAsPctVol>0</LimitTradeSizeAsPctVol>
<DisableSizeLimitWhenVolumeIsZero>1</DisableSizeLimitWhenVolumeIsZero>
<UsePrevBarEquityForPosSizing>0</UsePrevBarEquityForPosSizing>
<NBarStopHasPriority>0</NBarStopHasPriority>
<UseCustomBacktestProc>0</UseCustomBacktestProc>
<CustomBacktestProcFormulaPath/>
<MinPosValue>0</MinPosValue>
<MaxPosValue>0</MaxPosValue>
<ChartInterval>300</ChartInterval>
<DisableRuinStop>0</DisableRuinStop>
<OptTarget>CAR/MDD</OptTarget>
<WFMode>0</WFMode>
<GenerateReport>1</GenerateReport>
<MaxLongPos>0</MaxLongPos>
<MaxShortPos>0</MaxShortPos>
<SeparateLongShortRank>0</SeparateLongShortRank>
<TotalSymbolQty>207</TotalSymbolQty>
<EnableUserReportCharts>1</EnableUserReportCharts>
<ChartWidth>500</ChartWidth>
<ChartHeight>300</ChartHeight>
<SettlementDelay>0</SettlementDelay>
<PortfolioReportSystemFormula>1</PortfolioReportSystemFormula>
<InterestRateSymbol/>
<MarginRate>1</MarginRate>
<IncludeBHStats>1</IncludeBHStats>
<BHSymbol>^DJI</BHSymbol>
<MCEnable>1</MCEnable>
<MCRuns>1000</MCRuns>
<MCPosSizeMethod>0</MCPosSizeMethod>
<MCPosSizeShares>100</MCPosSizeShares>
<MCPosSizeValue>1000</MCPosSizeValue>
<MCPosSizePctEquity>5</MCPosSizePctEquity>
<MCChartEquityCurves>1</MCChartEquityCurves>
<MCStrawBroomLines>0</MCStrawBroomLines>
<Scenario>0</Scenario>
<MCChartEquityScale>0</MCChartEquityScale>
<MCUseEquityChanges>0</MCUseEquityChanges>
<MCLogScaleFinalEquity>0</MCLogScaleFinalEquity>
<MCLogScaleDrawdown>0</MCLogScaleDrawdown>
<MCNegativeDrawdown>1</MCNegativeDrawdown>
<ISEnabled>1</ISEnabled>
<ISStartDate>2000-01-01</ISStartDate>
<ISEndDate>2004-01-01</ISEndDate>
<ISLastDate>2008-01-01</ISLastDate>
<ISStep>1</ISStep>
<ISStepUnit>3</ISStepUnit>
<ISAnchored>0</ISAnchored>
<ISLastUsesToday>1</ISLastUsesToday>
<OSEnabled>1</OSEnabled>
<OSStartDate>2004-01-01</OSStartDate>
<OSEndDate>2005-01-01</OSEndDate>
<OSLastDate>2009-01-01</OSLastDate>
<OSStep>1</OSStep>
<OSStepUnit>3</OSStepUnit>
<OSAnchored>0</OSAnchored>
<OSLastUsesToday>1</OSLastUsesToday>
</BacktestSettings>
</AmiBroker-Analysis>
